<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Scientific logbook (Posts about blog)</title><link>https://laurentperrinet.github.io/sciblog/</link><description></description><atom:link href="https://laurentperrinet.github.io/sciblog/categories/blog.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents © 2019 &lt;a href="mailto:laurent.perrinet@univ-amu.fr"&gt;Laurent Perrinet&lt;/a&gt; 
&lt;a rel="license" href="http://creativecommons.org/licenses/by-nc-sa/2.5/ar/"&gt;
&lt;img alt="Creative Commons License BY-NC-SA"
style="border-width:0; margin-bottom:12px;"
src="http://i.creativecommons.org/l/by-nc-sa/2.5/ar/88x31.png"&gt;&lt;/a&gt;</copyright><lastBuildDate>Fri, 15 Mar 2019 09:35:05 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Some basics around probabilities</title><link>https://laurentperrinet.github.io/sciblog/posts/2017-03-09_probabilities.html</link><dc:creator>Laurent Perrinet</dc:creator><description>&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;h2 id="basics-of-probability-theory"&gt;basics of probability theory&lt;a class="anchor-link" href="https://laurentperrinet.github.io/sciblog/posts/2017-03-09_probabilities.html#basics-of-probability-theory"&gt;¶&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;In the context of a &lt;a href="https://invibe.net/LaurentPerrinet/Presentations/2018-03-26_cours-NeuroComp"&gt;course in Computational Neuroscience&lt;/a&gt;, I am teaching a basic introduction in &lt;a href="https://laurentperrinet.github.io/sciblog/files/2018-03-26_cours-NeuroComp_FEP.html"&gt;Probabilities, Bayes and the Free-energy principle&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Let's learn to use probabilities in practice by generating some "synthetic data", that is by using the computer's number generator. 
2018-03-26_cours-NeuroComp_FEP&lt;/p&gt;
&lt;p&gt;&lt;a href="https://laurentperrinet.github.io/sciblog/posts/2017-03-09_probabilities.html"&gt;Read more…&lt;/a&gt; (12 min remaining to read)&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</description><category>blog</category><category>ipython</category><category>learning</category><category>open-science</category><category>python</category><guid>https://laurentperrinet.github.io/sciblog/posts/2017-03-09_probabilities.html</guid><pubDate>Thu, 09 Mar 2017 10:41:27 GMT</pubDate></item><item><title>Bogacz (2017) A tutorial on free-energy</title><link>https://laurentperrinet.github.io/sciblog/posts/2017-01-15-bogacz-2017-a-tutorial-on-free-energy.html</link><dc:creator>Laurent Perrinet</dc:creator><description>&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;I enjoyed reading "A tutorial on the free-energy framework for modelling perception and learning" by &lt;em&gt;Rafal Bogacz&lt;/em&gt;, which is freely available &lt;a href="http://www.sciencedirect.com/science/article/pii/S0022249615000759"&gt;here&lt;/a&gt;. In particular, the author encourages to replicate the results in the paper. He is himself giving solutions in matlab, so I had to do the same in python all within a notebook...&lt;/p&gt;
&lt;p&gt;&lt;a href="https://laurentperrinet.github.io/sciblog/posts/2017-01-15-bogacz-2017-a-tutorial-on-free-energy.html"&gt;Read more…&lt;/a&gt; (5 min remaining to read)&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</description><category>blog</category><category>ipython</category><category>learning</category><category>open-science</category><category>python</category><category>sparse</category><guid>https://laurentperrinet.github.io/sciblog/posts/2017-01-15-bogacz-2017-a-tutorial-on-free-energy.html</guid><pubDate>Sun, 15 Jan 2017 20:41:27 GMT</pubDate></item><item><title>Resizing a bunch of files using the command-line interface</title><link>https://laurentperrinet.github.io/sciblog/posts/2016-11-29-resizing-a-bunch-of-files-using-the-command-line-interface.html</link><dc:creator>Laurent Perrinet</dc:creator><description>&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;h2 id="generating-databases"&gt;generating databases&lt;a class="anchor-link" href="https://laurentperrinet.github.io/sciblog/posts/2016-11-29-resizing-a-bunch-of-files-using-the-command-line-interface.html#generating-databases"&gt;¶&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;A set of bash code to resize images to a fixed size.&lt;/p&gt;
&lt;p&gt;Problem statement: we have a set of images with heterogeneous sizes and we want to homogenize the database to avoid problems when classifying them. 
Solution: ImageMagick.&lt;/p&gt;
&lt;p&gt;We first identify the size and type of images in the database. The database is a collection of folders containing each a collection of files. We thus do a nested recursive loop:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://laurentperrinet.github.io/sciblog/posts/2016-11-29-resizing-a-bunch-of-files-using-the-command-line-interface.html"&gt;Read more…&lt;/a&gt; (98 min remaining to read)&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</description><category>blog</category><category>ipython</category><category>open-science</category><category>python</category><category>SLIP</category><guid>https://laurentperrinet.github.io/sciblog/posts/2016-11-29-resizing-a-bunch-of-files-using-the-command-line-interface.html</guid><pubDate>Tue, 29 Nov 2016 08:08:52 GMT</pubDate></item><item><title>Using generators in Python</title><link>https://laurentperrinet.github.io/sciblog/posts/2016-11-24-using-generators-in-python.html</link><dc:creator>Laurent Perrinet</dc:creator><description>&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;Let's explore generators and the &lt;code&gt;yield&lt;/code&gt; statement in the &lt;a href="http://bit.ly/1uFNyUX"&gt;python&lt;/a&gt; language...&lt;/p&gt;
&lt;p&gt;&lt;a href="https://laurentperrinet.github.io/sciblog/posts/2016-11-24-using-generators-in-python.html"&gt;Read more…&lt;/a&gt; (25 min remaining to read)&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</description><category>blog</category><category>ipython</category><category>open-science</category><category>python</category><guid>https://laurentperrinet.github.io/sciblog/posts/2016-11-24-using-generators-in-python.html</guid><pubDate>Thu, 24 Nov 2016 13:22:22 GMT</pubDate></item><item><title>Finding extremal values in a nd-array</title><link>https://laurentperrinet.github.io/sciblog/posts/2016-11-17-finding-extremal-values-in-a-nd-array.html</link><dc:creator>Laurent Perrinet</dc:creator><description>&lt;div&gt;&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;Sometimes, you need to pick up the $N$-th  extremal values in a mutli-dimensional matrix.&lt;/p&gt;
&lt;p&gt;Let's suppose it is represented as a &lt;code&gt;nd-array&lt;/code&gt; (here, I further suppose you are using the numpy library from the python language). Finding extremal values is easy with &lt;code&gt;argmax&lt;/code&gt;,  &lt;code&gt;argmin&lt;/code&gt; or &lt;code&gt;argsort&lt;/code&gt; but this function operated on 1d vectors...  Juggling around indices is sometimes not such an easy task, but luckily, we have the &lt;code&gt;unravel_index&lt;/code&gt; function.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;For those in a hurry, one quick application is that given an &lt;code&gt;np.ndarray&lt;/code&gt;, it's eeasy to get the index of the maximal value in that array :&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [1]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;numpy&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;np&lt;/span&gt;
&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;arange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reshape&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;permutation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;arange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reshape&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'input ndarray'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;idx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;unravel_index&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argmax&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ravel&lt;/span&gt;&lt;span class="p"&gt;()),&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;shape&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'index of maximal value = '&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;idx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;' and we verify that '&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;idx&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="s"&gt;'='&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;max&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

    &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;


&lt;div class="output_area"&gt;

    &lt;div class="prompt"&gt;&lt;/div&gt;


&lt;div class="output_subarea output_stream output_stdout output_text"&gt;
&lt;pre&gt;input ndarray [[[ 4  3]
  [19  7]
  [ 1 13]]

 [[ 6 12]
  [14  0]
  [16 11]]

 [[15 17]
  [20 22]
  [ 9  5]]

 [[ 8 18]
  [23 21]
  [10  2]]]
index of maximal value =  (3, 1, 0)  and we verify that  23 = 23
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;Let's unwrap how we found such an easy solution...&lt;/p&gt;
&lt;p&gt;&lt;a href="https://laurentperrinet.github.io/sciblog/posts/2016-11-17-finding-extremal-values-in-a-nd-array.html"&gt;Read more…&lt;/a&gt; (4 min remaining to read)&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</description><category>blog</category><category>ipython</category><category>numpy</category><category>open-science</category><category>python</category><guid>https://laurentperrinet.github.io/sciblog/posts/2016-11-17-finding-extremal-values-in-a-nd-array.html</guid><pubDate>Thu, 17 Nov 2016 08:56:25 GMT</pubDate></item><item><title>Saving and displaying movies and dynamic figures</title><link>https://laurentperrinet.github.io/sciblog/posts/2016-11-15-saving-and-displaying-movies-and-dynamic-figures.html</link><dc:creator>Laurent Perrinet</dc:creator><description>&lt;div&gt;&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;It is insanely useful to create movies to illustrate a talk, blog post or just to include in a notebook:&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [1]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;IPython.display&lt;/span&gt; &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="n"&gt;HTML&lt;/span&gt;
&lt;span class="n"&gt;HTML&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'&amp;lt;center&amp;gt;&amp;lt;video controls autoplay loop src="../files/2016-11-15_noise.mp4" width=61.8%/&amp;gt;&amp;lt;/center&amp;gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

    &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;


&lt;div class="output_area"&gt;

    &lt;div class="prompt output_prompt"&gt;Out[1]:&lt;/div&gt;



&lt;div class="output_html rendered_html output_subarea output_execute_result"&gt;
&lt;center&gt;&lt;video controls autoplay loop src="https://laurentperrinet.github.io/sciblog/files/2016-11-15_noise.mp4" width="61.8%/"&gt;&lt;/video&gt;&lt;/center&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;For years I have used a custom made solution made around saving single frames and then calling &lt;code&gt;ffmpeg&lt;/code&gt; to save that files to a movie file. That function (called &lt;code&gt;anim_save&lt;/code&gt; had to be maintained accross different libraries to reflect new needs (going to WEBM and MP4 formats for instance). That made the code longer than necessary and had not its place in a scientific library.&lt;/p&gt;
&lt;p&gt;Here, I show how to use the &lt;code&gt;animation&lt;/code&gt; library from matplotlib to replace that 
&lt;/p&gt;&lt;p&gt;&lt;a href="https://laurentperrinet.github.io/sciblog/posts/2016-11-15-saving-and-displaying-movies-and-dynamic-figures.html"&gt;Read more…&lt;/a&gt; (6 min remaining to read)&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</description><category>blog</category><category>ipython</category><category>Motion Particles</category><category>open-science</category><category>python</category><guid>https://laurentperrinet.github.io/sciblog/posts/2016-11-15-saving-and-displaying-movies-and-dynamic-figures.html</guid><pubDate>Tue, 15 Nov 2016 08:56:25 GMT</pubDate></item><item><title>A pi-pie named Monte Carlo</title><link>https://laurentperrinet.github.io/sciblog/posts/2016-10-01-a-p-pie-named-monte-carlo.html</link><dc:creator>Laurent Perrinet</dc:creator><description>&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;A lively community of people including students, researchers and tinkerers from Marseille (France) celebrate the so-called &lt;a href="http://www.piday.fr"&gt;"π-day"&lt;/a&gt; on the 3rd month, 14th day of each year. A nice occasion for general talks on mathematics and society in a lively athmosphere and of course to ... a pie contest!&lt;/p&gt;
&lt;p&gt;I participated last year (in &lt;a href="http://www.piday.fr/2016/"&gt;2016&lt;/a&gt;) with a pie called "Monte Carlo". Herein, I give the recipe by giving some clues on its design... This page is a &lt;a href="http://jupyter.org/"&gt;notebook&lt;/a&gt; - meaning that you can download it and re-run the analysis I do here at home (and most importantly comment or modify it and correct potential bugs...).&lt;/p&gt;
&lt;p&gt;&lt;a href="https://laurentperrinet.github.io/sciblog/posts/2016-10-01-a-p-pie-named-monte-carlo.html"&gt;Read more…&lt;/a&gt; (18 min remaining to read)&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</description><category>blog</category><category>openscience</category><guid>https://laurentperrinet.github.io/sciblog/posts/2016-10-01-a-p-pie-named-monte-carlo.html</guid><pubDate>Sat, 01 Oct 2016 12:22:36 GMT</pubDate></item><item><title>Une tarte au pi nommée Monte Carlo</title><link>https://laurentperrinet.github.io/sciblog/posts/2016-10-01-une-tarte-au-pi-nommee-monte-carlo.html</link><dc:creator>Laurent Perrinet</dc:creator><description>&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;Une active communauté d'étudiants, chercheurs et bidouilleurs célèbrent à Marseille la &lt;a href="http://www.piday.fr"&gt;"journée π"&lt;/a&gt; le 3ème mois, 14ème jour de chaque année. Une occasion de rêve pour en
apprendre plus sur les mathématiques et la science dans une ambiance conviviale... Mais c'est aussi l'occasion d'un concours de tartes!&lt;/p&gt;
&lt;p&gt;J'ai eu l'opportunité d'y participer l'an dernier (soit pour l'édition &lt;a href="http://www.piday.fr/2016/"&gt;2016&lt;/a&gt;) avec une tarte appelée "Monte Carlo". Je vais donner ici la "recette" de ma tarte, le lien avec le nombre π et quelques digressions mathématiques (notament par rapport à la présence incongrue d'un éléphant mais aussi par rapport à la démarche scientifique)... Cette page est un "&lt;a href="http://jupyter.org/"&gt;notebook&lt;/a&gt;" - vous pouvez donc la télécharger et relancer les analyses et figures (en utilisant python +  jupyter). C'est aussi un travail non figé - prière de me suggérer des corrections!&lt;/p&gt;
&lt;p&gt;&lt;a href="https://laurentperrinet.github.io/sciblog/posts/2016-10-01-une-tarte-au-pi-nommee-monte-carlo.html"&gt;Read more…&lt;/a&gt; (18 min remaining to read)&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</description><category>blog</category><category>openscience</category><guid>https://laurentperrinet.github.io/sciblog/posts/2016-10-01-une-tarte-au-pi-nommee-monte-carlo.html</guid><pubDate>Sat, 01 Oct 2016 12:22:36 GMT</pubDate></item><item><title>Animation in a notebook using holoviews</title><link>https://laurentperrinet.github.io/sciblog/posts/2014-10-20-animation-in-a-notebook-using-holoviews.html</link><dc:creator>Laurent Perrinet</dc:creator><description>&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;An easy way to include movie in a notebook using &lt;a href="https://ioam.github.io/holoviews/"&gt;Holoviews&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://laurentperrinet.github.io/sciblog/posts/2014-10-20-animation-in-a-notebook-using-holoviews.html"&gt;Read more…&lt;/a&gt; (3 min remaining to read)&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</description><category>blog</category><category>holoviews</category><category>interactive</category><category>ipython</category><category>python</category><guid>https://laurentperrinet.github.io/sciblog/posts/2014-10-20-animation-in-a-notebook-using-holoviews.html</guid><pubDate>Mon, 20 Oct 2014 12:03:08 GMT</pubDate></item><item><title>Chi distribution</title><link>https://laurentperrinet.github.io/sciblog/posts/2014-10-20-chi-distribution.html</link><dc:creator>Laurent Perrinet</dc:creator><description>&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;When studying a multi-dimensional random variable, if these are guassian the norm if the vector follows a $\chi$ distribution (see &lt;a href="http://en.m.wikipedia.org/wiki/Chi_distribution"&gt;http://en.m.wikipedia.org/wiki/Chi_distribution&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;&lt;a href="https://laurentperrinet.github.io/sciblog/posts/2014-10-20-chi-distribution.html"&gt;Read more…&lt;/a&gt; (2 min remaining to read)&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</description><category>anr-speed</category><category>blog</category><category>ipython</category><category>probability</category><category>python</category><guid>https://laurentperrinet.github.io/sciblog/posts/2014-10-20-chi-distribution.html</guid><pubDate>Mon, 20 Oct 2014 11:47:18 GMT</pubDate></item></channel></rss>